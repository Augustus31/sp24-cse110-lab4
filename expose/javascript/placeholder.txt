1. 3. The variable i has function scope, so it still accessible after the for loop. The loop terminates when i is 3, and thus 3 is printed.
2. 150. The variable discountedPrice has function scope, so it still accessible after the for loop. The loop's last pass is when i is 2, and discountedPrice is therefore 300/2 = 150.
3. 150, for the same reasons described above. 
4. [50,100,150]. The array contains all of the values in the original array, multiplied by 0.5.
5. Error, since i was not declared within the scope of the print statement.
6. Error, same reason as above.
7. 150. The variable finalPrice has block scope, but the block includes this print statements. Thus, its value (which was last changed at the final loop-through of the for loop, in which it was set to 150) will be printed.
8. [50,100,150]. The scope of the variable (its block) includes the return statement, so the variable does exist when it is returned.
9. Error, since i was not declared within the scope of the print statement.
10. 3. The variable length is const, but isn't modified, so there is no error. The length of the list passed into the function is 3.
11. [50,100,150]. The array is declared as const, and thus cannot be reasigned; however, it can be mutated. Pushing new elements will not cause an error. So the function will return the same result as in Q4.
12. 